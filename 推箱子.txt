#include<stdio.h>
#include<conio.h> 
#include<windows.h>

int gameMap[9][11] = {
	{0,1,1,1,1,1,1,1,1,1,0},
	{0,1,0,0,0,1,0,0,0,1,0},
	{0,1,0,0,3,0,0,0,0,1,0},
	{0,1,0,3,0,3,3,3,0,1,1},
	{0,1,0,0,0,2,0,0,0,0,1},
	{1,1,0,0,1,1,1,0,3,0,1},
	{1,0,4,4,0,4,0,0,0,0,1},
	{1,0,4,4,0,4,4,3,0,1,1},
	{1,1,1,1,1,1,1,1,1,1,0}
};
//0 代表着空白的地方； 
//1 代表着墙；
//2 代表着人；
//3 代表着箱子；
//4 代表着箱子的终点位置。 

//进行小人的移动
void updata()
{
	int row, caw = 0;//行和列 
	int i, j, tui;
	for (i = 0; i < 9; i++) {
		for (j = 0; j < 11; j++)
		{
			if (gameMap[i][j] == 2 || gameMap[i][j] == 6)
			{
				row = i;
				caw = j;
			}
		}
	}

	tui = getch();
	//与getchar()有区别的是：getchar()输入一个字符后需要回车来进行下一个字符的输入，
	//比较麻烦 ，getch()则不需要回车就能连续输入多个字符。 

	switch (tui)
	{//上
	case 'W':
	case 72:
		// 1.人的前面是空地；
		// 2.人的前面是终点位置；
		// 3.人的前面是箱子
		//3.1.箱子的前面是空地；
		//3.2.箱子的前面是终点位置。
		if (gameMap[row - 1][caw] == 0 || gameMap[row - 1][caw] == 4)
		{
			gameMap[row][caw] -= 2;
			gameMap[row - 1][caw] += 2;
		}
		else if (gameMap[row - 1][caw] == 3 || gameMap[row - 1][caw] == 7)
		{
			if (gameMap[row - 2][caw] == 0 || gameMap[row - 2][caw] == 4)
			{
				gameMap[row][caw] -= 2;
				gameMap[row - 1][caw] -= 1;
				gameMap[row - 2][caw] += 3;
			}
		}
		break;

		//下 
	case 'S':
	case 80://键值 
		if (gameMap[row + 1][caw] == 0 || gameMap[row + 1][caw] == 4)
		{
			gameMap[row][caw] -= 2;
			gameMap[row + 1][caw] += 2;
		}

		else if (gameMap[row + 2][caw] == 0 || gameMap[row + 2][caw] == 4)
		{
			if (gameMap[row + 1][caw] == 3 || gameMap[row + 1][caw] == 7)
			{
				gameMap[row][caw] -= 2;
				gameMap[row + 1][caw] -= 1;
				gameMap[row + 2][caw] += 3;
			}
		}
		break;
		//左 
	case 'A':
	case 75:
		if (gameMap[row][caw - 1] == 0 || gameMap[row][caw - 1] == 4)
		{
			gameMap[row][caw] -= 2;
			gameMap[row][caw - 1] += 2;
		}

		else if (gameMap[row][caw - 2] == 0 || gameMap[row][caw - 2] == 4)
		{
			if (gameMap[row][caw - 1] == 3 || gameMap[row][caw - 1] == 7)
			{
				gameMap[row][caw] -= 2;
				gameMap[row][caw - 1] -= 1;
				gameMap[row][caw - 2] += 3;
			}
		}
		break;
		//右 
	case 'D':
	case 77:
		if (gameMap[row][caw + 1] == 0 || gameMap[row][caw + 1] == 4)
		{
			gameMap[row][caw] -= 2;
			gameMap[row][caw + 1] += 2;
		}

		else if (gameMap[row][caw + 2] == 0 || gameMap[row][caw + 2] == 4)
		{
			if (gameMap[row][caw + 1] == 3 || gameMap[row][caw + 1] == 7)
			{
				gameMap[row][caw] -= 2;
				gameMap[row][caw + 1] -= 1;
				gameMap[row][caw + 2] += 3;
			}
		}
		break;

	}
}

void text()
{
	int k = 0;//初始化
	int j, i;
	for (i = 0; i < 9; i++)
	{
		for (j = 0; j < 11; j++)
		{
			if (gameMap[i][j] == 3)
				k++;
		}
	}
	if (k == 0)
		printf("完成挑张！\n");
}

//把图形刻画出来
void draw()
{
	int i, j;
	text();//调用输赢的函数 
	for (i = 0; i < 9; i++)
	{
		for (j = 0; j < 11; j++)
		{

			if (gameMap[i][j] == 0) {
				printf("  "); //空白的地方
			}
			if (gameMap[i][j] == 1) {
				printf("■"); //墙 
			}
			if (gameMap[i][j] == 2) {
				printf("♀"); //人 
			}
			if (gameMap[i][j] == 3) {
				printf("☆"); //箱子 
			}
			if (gameMap[i][j] == 4) {
				printf("◎"); //终点地方 
			}
			if (gameMap[i][j] == 6) {
				printf("♂");//人加终点位置 
			}
			if (gameMap[i][j] == 7) {
				printf("★");//箱子加终点位置
			}
		}
		printf("\n");
	}
}


int main()
{
	while (1)
	{
		draw();
		updata();
		system("cls");//清屏 
	}
	return 0;
}

